{"version":3,"sources":["actions/titleActions.js","components/Title.js","actions/recipeActions.js","components/CardAdd.js","components/CardEdit.js","components/List.js","reducers/titleReducer.js","reducers/recipesReducer.js","reducers/index.js","components/navbar/Nav.js","editForm/TodoForm.js","editForm/TodoIndex.js","utils/axiosWithAuth.js","components/Login.js","Heading.js","components/PrivateRoute.js","index.js"],"names":["TOGGLE_EDITING","SET_TITLE","connect","titleState","title2","title","editing","toggleEditing","type","setTitle","newTitle","payload","props","useState","newTitleText","setNewTitleText","for","className","name","value","onChange","e","target","onClick","ADD_NEW_RECIPE","EDIT_RECIPE","EDIT_MAT","addNewRecipe","recipe","editRecipe","editNewRecipe","newMat","CardAdd","React","Component","constructor","super","handleChanges","this","setState","newRecipe","handleMatChanges","newRecipeMat","handleDirChanges","newRecipeDir","state","recStatus","editStatus","render","Fragment","placeholder","recipes","recipesReducer","CardEdit","console","log","oneToEdit","recipeMat","recipeDir","List","handleRecStatus","handleh3","key","map","index","toString","initialState","combineReducers","action","id","recId","Nav","theCategory","catLink","FishCat1","FishCat2","SaladCat1","TodoIndex","axiosWithAuth","token","localStorage","getItem","axios","create","baseURL","headers","Authorization","Login","credentials","username","password","handleChange","login","preventDefault","post","then","res","setItem","data","history","push","catch","err","error","response","onSubmit","Heading","to","removeItem","PrivateRoute","component","AppComp","App","exact","path","store","createStore","rootReducer","applyMiddleware","next","group","getState","groupEnd","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.ab91d2b9.chunk.js","sourcesContent":["/*\r\n  1. action - object that has a type: key and optional payload: key\r\n  2. action creator - function that creates and returns an action\r\n  3. action names - const variables that we use for naming our actions\r\n*/\r\n\r\nexport const TOGGLE_EDITING = \"TOGGLE_EDITING\";\r\nexport const SET_TITLE = \"SET_TITLE\";\r\n\r\nexport const toggleEditing = () => {\r\n  return {\r\n    type: TOGGLE_EDITING\r\n  };\r\n};\r\n\r\nexport const setTitle = (newTitle) => {\r\n  return {\r\n    type: SET_TITLE,\r\n    payload: newTitle\r\n  };\r\n};\r\n","import React, { useState, useReducer } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { toggleEditing, setTitle } from \"../actions/titleActions\";\n\n// import { initialState, titleReducer } from \"../reducers/titleReducer\";\n\nconst Title = (props) => {\n  const [newTitleText, setNewTitleText] = useState();\n  // const [state, dispatch] = useReducer(titleReducer, initialState);\n  // console.log(state);\n\n  const handleChanges = (e) => {\n    setNewTitleText(e.target.value);\n  };\n\n  return (\n    <div>\n      <label for='category'>\n            Category\n          </label>\n      {!props.editing ? (\n        <h1>\n          {props.title2}{\" \"}\n          <i\n            className=\"far fa-edit\"\n            onClick={() => {\n              // dispatch({ type: \"TOGGLE_EDITING\" })\n              // debugger;\n              props.toggleEditing();\n            }}\n          />\n        </h1>\n      ) : (\n        <div>\n          \n          <input\n            className=\"title-input\"\n            type=\"text\"\n            name=\"newTitleText\"\n            value={newTitleText}\n            onChange={handleChanges}\n          />\n          <button\n            onClick={() => {\n              // setTitle(newTitleText);\n              // setEditing(false);\n              // dispatch({ type: \"UPDATE_TITLE\", payload: newTitleText })\n              props.setTitle(newTitleText);\n            }}\n          >\n            Update title\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\nconst mapStateToProps = ({ titleState }) => {\n  return {\n    title2: titleState.title,\n    editing: titleState.editing\n  };\n};\n\n\nexport default connect(mapStateToProps, { toggleEditing, setTitle })(Title);\n\n// const hocThatWillConnectTitleToReduxStore = connect(mapStateToProps, {});\n// const componentThatHasTitleConnectedToReduxStore = hocThatWillConnectTitleToReduxStore(\n//   Title\n// );\n// export default componentThatHasTitleConnectedToReduxStore;\n","export const ADD_NEW_RECIPE = \"ADD_NEW_RECIPE\";\r\nexport const EDIT_RECIPE = \"EDIT_RECIPE\";\r\nexport const EDIT_MAT = \"EDIT_MAT\";\r\nexport const addNewRecipe = (recipe) => {\r\n  return {\r\n    type: ADD_NEW_RECIPE,\r\n    payload: recipe\r\n  };\r\n};\r\n\r\nexport const editRecipe = () => {\r\n  return {\r\n    type: EDIT_RECIPE\r\n  };\r\n};\r\n\r\nexport const editNewRecipe = (newMat) => {\r\n  return {\r\n    type: EDIT_MAT,\r\n    payload: newMat\r\n  };\r\n};\r\n\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { addNewRecipe, editRecipe  } from \"../actions/recipeActions\";\n\nclass CardAdd extends React.Component {\n  constructor(props){\n    super(props);\n        this.state = {\n          newRecipe: \"\", recStatus: false, \n          newRecipeMat: \"\", editStatus: false, newRecipeDir:\"\"\n        };\n  }\n        handleChanges = (e) => {\n          this.setState({ newRecipe: e.target.value});\n        };\n        handleMatChanges = (e) => {\n          this.setState({ newRecipeMat: e.target.value });\n        };\n        handleDirChanges = (e) =>{\n          this.setState({newRecipeDir: e.target.value})\n        };\n        // handleRecStatus = (e) =>{\n        //   this.props.editRecipe();\n        //   this.setState({recStatus: !this.state.recStatus})\n        //   this.setState({editStatus: !this.state.editStatus})\n        //   console.log('status '+this.state.recStatus)\n        // };\n        // handleh3 = (e) =>{\n        //   /// Makes a brand new card Maybe need a new Compionent and use component did mount\n        //   if(this.state.recStatus){\n        //     ( <input\n        //       type=\"text\"\n        //       value={this.state.newRecipeMat}\n        //       onChange={this.handleMatChanges}\n        //       placeholder=\"Add new Recipe Materials\"\n              \n        //        >\n        //           new Mat here\n        //       </input>)\n        //       //Changes bercause of the editmat\n        //       this.props.editMat(this.state.newRecipeMat);\n        //    }\n        // }\n  \n  render() {\n    return (\n      <React.Fragment>\n\n\n        \n        <input\n          type=\"text\"\n          value={this.state.newRecipe}\n          onChange={this.handleChanges}\n          placeholder=\"Add new Recipe Title\"\n        />\n        <input\n          type=\"text\"\n          value={this.state.newRecipeMat}\n          onChange={this.handleMatChanges}\n          placeholder=\"Add new Recipe Materials\"\n        />\n        <input\n          type=\"text\"\n          value={this.state.newRecipeDir}\n          onChange={this.handleDirChanges}\n          placeholder=\"Add new Recipe Directions\"\n        />\n        <button\n          onClick={() => {\n            this.props.addNewRecipe(this.state);\n            // this.props.addNewRecipe(this.state.newRecipe);\n            // this.props.addNewRecipeMat(this.state.newRecipeMat);\n          }}\n        >\n          Add recipe\n        </button>\n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    recipes: state.recipesReducer.recipes,\n    editStatus: state.recipesReducer.recStatus\n  };\n};\n\nexport default connect(mapStateToProps, { addNewRecipe, editRecipe })(CardAdd);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { addNewRecipe, editRecipe, editNewRecipe } from \"../actions/recipeActions\";\n\nclass CardEdit extends React.Component {\n  constructor(props){\n    super(props);\n    // newRecipeDir needs to either be changed into a string like all the others. or \n    // Or the array elements each need a new line feature at each step of the directions so each array is one new line and has numeric srteps written out fro each procedure\n        this.state = {\n          newRecipe: this.props.recipes[this.props.oneToEdit].name, recStatus: false, \n          newRecipeMat: this.props.recipes[this.props.oneToEdit].recipeMat, editStatus: false,\n           newRecipeDir:[ this.props.recipes[this.props.oneToEdit].recipeDir], oneToEdit: [0]\n        };\n  }\n        handleChanges = (e) => {\n          this.setState({ newRecipe: e.target.value});\n          };\n        handleMatChanges = (e) => {\n          console.log('withinhandlematchanges',this.props.oneToEdit)\n          console.log(this.props.recipes[this.props.oneToEdit].name)\n          \n          this.setState({ newRecipeMat: e.target.value });\n          };\n        handleDirChanges = (e) =>{\n          this.setState({newRecipeDir: [e.target.value]})\n          \n        };\n        // handleRecStatus = (e) =>{\n        //   this.props.editRecipe();\n        //   this.setState({recStatus: !this.state.recStatus})\n        //   this.setState({editStatus: !this.state.editStatus})\n        //   console.log('status '+this.state.recStatus)\n        // };\n        // handleh3 = (e) =>{\n        //   /// Makes a brand new card Maybe need a new Compionent and use component did mount\n        //   if(this.state.recStatus){\n        //     ( <input\n        //       type=\"text\"\n        //       value={this.state.newRecipeMat}\n        //       onChange={this.handleMatChanges}\n        //       placeholder=\"Add new Recipe Materials\"\n              \n        //        >\n        //           new Mat here\n        //       </input>)\n        //       //Changes bercause of the editmat\n        //       this.props.editMat(this.state.newRecipeMat);\n        //    }\n        // }\n  \n  render() {\n    return (\n      <React.Fragment>\n\n\n        <label for='title'>\n        Title\n        </label>\n        <input\n          type=\"text\"\n          value={this.state.newRecipe}\n          onChange={this.handleChanges}\n          placeholder={this.state.newRecipe}\n        />\n        <label for='materials'>\n          Materials\n        </label>\n        <input\n          type=\"text\"\n          value={this.state.newRecipeMat}\n          onChange={this.handleMatChanges}\n          placeholder={this.state.newRecipeMat}\n        />\n        <label for='directions'>\n          Directions\n        </label>\n        <input\n          type=\"text\"\n          value={this.state.newRecipeDir[0]}\n          onChange={this.handleDirChanges}\n          placeholder={this.state.newRecipeDir[0]}\n        />\n        <button\n          onClick={() => {\n\n            \n            this.props.recipes[this.props.oneToEdit].recipeMat = this.state.newRecipeMat;\n            this.props.recipes[this.props.oneToEdit].name = this.state.newRecipe;\n        \n            this.props.recipes[this.props.oneToEdit].recipeDir = this.state.newRecipeDir;\n            \n            // this.props.editNewRecipe({recipes:this.state});\n            // this.props.addNewRecipe(this.state.newRecipe);\n            // this.props.addNewRecipeMat(this.state.newRecipeMat);\n          }}\n        >\n          1st Clk This Button Then Clk Save\n        </button>\n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    recipes: state.recipesReducer.recipes,\n    editStatus: state.recipesReducer.recStatus\n  };\n};\n\nexport default connect(mapStateToProps, { addNewRecipe, editRecipe, editNewRecipe })(CardEdit);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { addNewRecipe, editRecipe, editNewRecipe } from \"../actions/recipeActions\";\nimport CardAdd from \"./CardAdd\";\nimport CardEdit from \"./CardEdit\";\nclass List extends React.Component {\n  constructor(props){\n    super(props);\n        this.state = {\n          newRecipe: \"\", recStatus: false, \n          newRecipeMat: \"\", editStatus: false, newRecipeDir:\"\"\n        };\n  }\n        handleChanges = (e) => {\n          this.setState({ newRecipe: e.target.value});\n        };\n        handleMatChanges = (e) => {\n          this.setState({ newRecipeMat: e.target.value });\n        };\n        handleDirChanges = (e) =>{\n          this.setState({newRecipeDir: e.target.value})\n        };\n        handleRecStatus = (e) =>{\n          this.props.editRecipe();\n          this.setState({recStatus: !this.state.recStatus})\n          this.setState({editStatus: !this.state.editStatus})\n          console.log('status '+this.state.recStatus)\n        };\n        handleh3 = (e) =>{\n         if(this.state.recStatus){\n            ( <input\n              type=\"text\"\n              value={this.state.newRecipeMat}\n              onChange={this.handleMatChanges}\n              placeholder=\"Add new Recipe Materials\"\n              \n               >\n                  new Mat here\n              </input>)\n              this.props.editNewRecipe(this.state);\n           }\n        }\n  \n  render() {\n    return (\n      <React.Fragment>\n\n{this.state.recStatus ?\n                    (\n                      <>\n\n              <div key={\"10\"} className=\"friends-list\">\n                        {this.props.recipes.map((recipe, index) => (\n                          <>\n                           { // Make this as editCard Component instead \n                           \n                           }\n                              <CardEdit key={index.toString()} oneToEdit={index} recipe={recipe}/>\n\n                                  <h4 key={(index+1).toString()}  onClick={this.handleRecStatus}>\n                                    <i key={(index+2).toString()} className=\"fas\">\n                                    Save \n                                  \n                                    </i>\n                                  </h4> \n                                  \n                                  \n                          </>\n                      ))}\n                </div>\n\n                       \n                        </>\n                    ):\n                    (\n                      <>\n\n              <div key={\"55\"} className=\"friends-list\">\n                        {this.props.recipes.map((recipe, index) => (\n                          <>\n                              <div key={index} className=\"recipeCard\">\n                                <label for='title'>\n                                  Title\n                                </label>\n                                  <h2 key={(index+1).toString()}>\n                                  {index + ' ' +recipe.name}\n                                  \n                                  </h2>\n                                  <h4 key={(index+2).toString()}  onClick={this.handleRecStatus}>\n                                  <i key={(index+3).toString()}className=\"fas fa-dragon\" >Edit</i>\n                                  </h4> \n                                  <label for='materials'>\n                                    Materials\n                                  </label>\n                                  <h3 key={(index+4).toString()}>\n                                    \n                                  {recipe.recipeMat}\n                                  </h3>\n                                  <label for='directions'>\n                                    Directions\n                                  </label>\n                                  <p key={(index+5).toString()}>\n                                      {recipe.recipeDir}\n                                  </p>\n                                  \n                              </div>\n                          </>\n                      ))}\n              </div>\n\n                       \n                        </>\n                    )\n                      \n                      }\n                    \n\n\n{/*         \n        <input\n          type=\"text\"\n          value={this.state.newRecipe}\n          onChange={this.handleChanges}\n          placeholder=\"Add new Recipe Title\"\n        />\n        <input\n          type=\"text\"\n          value={this.state.newRecipeMat}\n          onChange={this.handleMatChanges}\n          placeholder=\"Add new Recipe Materials\"\n        />\n        <input\n          type=\"text\"\n          value={this.state.newRecipeDir}\n          onChange={this.handleDirChanges}\n          placeholder=\"Add new Recipe Directions\"\n        />\n        <button\n          onClick={() => {\n            this.props.addNewRecipe(this.state);\n            // this.props.addNewRecipe(this.state.newRecipe);\n            // this.props.addNewRecipeMat(this.state.newRecipeMat);\n          }}\n        >\n          Add recipe\n        </button> */}\n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    recipes: state.recipesReducer.recipes,\n    editStatus: state.recipesReducer.recStatus\n  };\n};\n\nexport default connect(mapStateToProps, { addNewRecipe, editRecipe, editNewRecipe })(List);\n","import { TOGGLE_EDITING, SET_TITLE } from \"../actions/titleActions\";\n\nconst initialState = {\n  title: \"Fish\",\n  editing: false\n};\n\nexport const titleReducer = (state = initialState, action) => {\n  console.log(`NAL: titleReducer.js: action: `, action);\n  switch (action.type) {\n    case SET_TITLE:\n      return {\n        ...state,\n        title: action.payload,\n        editing: false\n      };\n    // NEW CASE HERE\n    case TOGGLE_EDITING:\n      return {\n        ...state,\n        editing: !state.editing\n      };\n    default:\n      return state;\n  }\n};\n","import { ADD_NEW_RECIPE, EDIT_RECIPE, EDIT_MAT } from \"../actions/recipeActions\";\r\n\r\nconst initialState = {\r\n  recipes: [\r\n    { name: \"Shrimp Bobtail\", recStatus: false, \r\n    recipeMat:\"Shrimp, Sardines, Crab, Oyster, Clam, Lettus, Pineapple, Cabbage, Cranberrie, Strawberry, Optional To Addin: Tommato, fishkilts and stomach broth\", \r\n    recipeDir: ['20 OZ Shrimp + Sardines ',\r\n    '2LBs Crab with 9OZ oyster and clam chowder sauce mixed ',\r\n    '1 LB each of Lettus, pineapple & cabbage mixed with 6 OZ Fresh Cranberries or Strawberries ', \r\n    'Combine All 3 Mixes together to Make the Shrimp Bobtail '] },\r\n    { name: \"Gumbo Soup\", recStatus: false,  \r\n    recipeMat:\"Sardines, Yellow Mustard, Carrots, Cabbage, Lettus\", \r\n    recipeDir: ['2 LBs spoons Sardines',' 8 OZ Yellow Mustard',\r\n    '3 LBs spoons Lettus, Carrots, and Cabbage'] }\r\n  ],\r\n  recStatus: true\r\n};\r\n\r\nexport const recipesReducer = (state = initialState, action) => {\r\n  \r\n  console.log(`NAL: recipesReducer: action: `, action);\r\n  switch (action.type) {\r\n    case ADD_NEW_RECIPE:\r\n      return {\r\n        \r\n          ...state,\r\n        recipes: [\r\n          ...state.recipes,\r\n          \r\n          {\r\n            id: action.payload.recId,\r\n             name: action.payload.newRecipe, \r\n            recStatus: action.payload.recStatus,\r\n            recipeMat: action.payload.newRecipeMat,\r\n            recipeDir: action.payload.newRecipeDir \r\n          }\r\n        ]\r\n      };\r\n      case EDIT_RECIPE:\r\n        return {\r\n          ...state,\r\n          recStatus: !state.recStatus\r\n        };\r\n      case EDIT_MAT:\r\n          return{\r\n            ...state.recipes,\r\n            recipes: [\r\n              ...state,\r\n              \r\n              { \r\n                name: action.payload.newRecipe, \r\n                recStatus: action.payload.recStatus,\r\n                recipeMat: action.payload.newRecipeMat,\r\n                recipeDir: action.payload.newRecipeDir \r\n              }\r\n            ]\r\n          };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { titleReducer } from \"./titleReducer\";\r\nimport { recipesReducer } from \"./recipesReducer\";\r\n\r\nexport default combineReducers({ titleState: titleReducer, recipesReducer });\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { addNewRecipe, editRecipe } from \"../../actions/recipeActions\";\n\nclass Nav extends React.Component {\n  constructor(props){\n    super(props);\n        this.state = {\n          catLink: ['Fish',{FishCat1:'Shrimp Bobtail',FishCat2:'Gumbo Soup'}\n                  ,'Salad',{SaladCat1:'Qual Salad'}\n        ],\n          newRecipe: \"\", recStatus: false, theCategory: \"\", \n          editStatus: false, newRecipeDir:\"\"\n        };\n  }\n        handleChanges = (e) => {\n          this.setState({ newRecipe: e.target.value});\n        };\n        handleMatChanges = (e) => {\n          this.setState({ theCategory: e.target.value });\n        };\n        handleDirChanges = (e) =>{\n          this.setState({newRecipeDir: e.target.value})\n        };\n        handleRecStatus = (e) =>{\n          this.props.editRecipe();\n          this.setState({recStatus: !this.state.recStatus})\n          this.setState({editStatus: !this.state.editStatus})\n          console.log('status '+this.state.recStatus)\n      \n      \n        };\n  \n  \n  render() {\n    return (\n      <React.Fragment>\n\n<div className=\"friends-list\">\n        <nav key={0}> \n          {\n                  \n        // Get the recipe names\n          this.props.recipes.map((recipe, index) => (\n            <>\n                <div key={index.id} className=\"recipeCard\">\n                    <h2 key={index}>\n                    {recipe.name}\n                    \n                    </h2>\n\n                </div>\n            </>\n        ))}\n        </nav>\n        </div>\n\n        \n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    recipes: state.recipesReducer.recipes,\n    editStatus: state.recipesReducer.recStatus\n  };\n};\n\nexport default connect(mapStateToProps, { addNewRecipe, editRecipe })(Nav);\n","import React from \"react\";\n\n/*\n    1. add a constructor that creates state (itemName)\n    2. on the input component add a 'value' property that gets it's value from the newly created state\n    3. build out handleChanges to update the state with each keystroke\n    4. don't forget to use the onChange property on the input component\n*/\n\nclass TodoForm extends React.Component {\n  // Constructor with state\n  constructor() {\n    super();\n    this.state = {\n      itemName: null\n    };\n  }\n  handleChanges = (e) => {\n    // update state with each keystroke\n    this.setState({\n      itemName: e.target.value\n    });\n  };\n\n  handleAdd = (e) =>{\n\n   e.preventDefault();\n    this.props.addItem(this.state.itemName)\n    this.setState({\n      itemName: ''\n    })\n  }\n\n\n\n\n  // class property to submit form\n\n  render() {\n    return (\n      <div className=\"App\">\n          <form className='FormApp' onSubmit={this.handleAdd}>\n          {/* This is an uncontrolled component 😬 We want it to be controlled by state */}\n          <input value={this.state.itemName} onChange={this.handleChanges} type=\"text\" name=\"item\" />\n          <button >Add</button>\n          \n        </form>\n      </div>\n    );\n  }\n}\n\nexport default TodoForm;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\";\nimport \"./Styles.css\";\n\nconst todolist = [\n  {\n    task: 'Edit Individual Todos',\n    id: 1528817077286,\n    completed: false\n  },\n  {\n    task: 'Brush Teeth',\n    id: 1528817084358,\n    completed: false\n  }\n];\n\nclass TodoIndex extends React.Component {\n  // Constructor with state\n  constructor() {\n    super();\n    this.state = {\n      // groceries: groceries\n      todolist\n    };\n  }\n\n  // Class methods to update state\n  // function togglePurchased(itemId) {\n  //    avoid creating functions like this\n  //    because this is a reminder that classes\n  //    in javascript were gleemed on as an ugly hack\n  // }\n  toggleDone = (itemId) => {\n    console.log(\"bk: index.js: App: togglePurchased: itemId: \", itemId);\n    // update state\n    // this.state.groceries[id].purchased = false;\n    this.setState({\n      ...this.state,\n      todolist: this.state.todolist.map((item) => {\n        if (item.id === itemId) {\n          return {\n            ...item,\n            completed: !item.completed\n          };\n        }\n        return item;\n      })\n    });\n  };\n\n  clearTodos = () => {\n    this.setState({\n     todolist: this.state.todolist.filter((task) => !task.completed)\n    })\n  }\n  addItem = itemName => {\n    console.log(\"NAL: App.js: App: addItem: itemName: \", itemName);\n    this.setState({\n      todolist: [...this.state.todolist, \n        {id: Date.now(), task: itemName, completed: false}]\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Todo List as an MVP</h1>\n        <TodoList\n          todolist={this.state.todolist}\n          toggleDone={this.toggleDone}\n          addItem={this.addItem}\n          clearTodos={this.clearTodos} \n        />\n      </div>\n      <TodoForm addItem={this.addItem}/>\n      </div>\n    );\n  }\n}\n\nexport default TodoIndex;","import axios from 'axios';\n\nconst axiosWithAuth = () => {\n  const token = localStorage.getItem('token');\n\n  return axios.create({\n    baseURL: \"http://localhost:5000/api\",\n    headers: {\n      Authorization: token\n    }\n  })\n}\n\nexport default axiosWithAuth","import React from 'react';\nimport axiosWithAuth from '../utils/axiosWithAuth';\n\nclass Login extends React.Component {\n  state = {\n    credentials: {\n      username: '',\n      password: ''\n    }\n  };\n\n  handleChange = e => {\n    this.setState({\n      credentials: {\n        ...this.state.credentials,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  /*\n    1. connect to server with username/passowrd\n    2. store the token that gets passed on successful login\n    3. output an error when we have an unsuccessful login\n  */\n\n  login = e => {\n    e.preventDefault();\n    // login to server\n    axiosWithAuth().post(\"http://localhost:5000/api/login\", this.state.credentials)\n      .then(res => {\n        console.log('bk: Login.js: login: res: ', res)\n        localStorage.setItem('token', res.data.payload)\n        this.props.history.push('/protected')\n      })\n      .catch(err => {\n        console.error(err.response)\n      })\n  };\n\n  render() {\n    return (\n      <div>Login as Username: Greg Password: Dollars\n        <form onSubmit={this.login}>\n          <label for='username'>\n            Username\n          </label>\n          <input\n            type=\"text\"\n            name=\"username\"\n            value={this.state.credentials.username}\n            onChange={this.handleChange}\n          />\n          <label for='password'>\n            Password\n          </label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={this.state.credentials.password}\n            onChange={this.handleChange}\n          />\n          <button>Log in</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;","\n\n\n\nimport React from 'react';\n// import logout from './index'\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Login from './components/Login.js';\n\nclass Heading extends React.Component {\nrender(){\n    const logout = () => {\n        localStorage.removeItem('token')\n      };\n    \n    return(\n\n\n        <div className='heading'>\n            <ul className='heading'>\n            <li>\n                <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n                <Link onClick={logout}>Logout</Link>\n            </li>\n            <li>\n                <Link to=\"/protected\">Recipes Page</Link>\n            </li>\n        </ul>\n        </div>\n            \n    )\n}\n\n}\n\n\nexport default Heading","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n/*\n  1. it has the same interface a Route\n  2. it renders a <Route /> and pass props to it\n  3. it checks if the user has an authentication \n     token and if they do, it renderd the passed in component\n  4. if the user does not have an authentication token, it redirects to /login\n*/\nconst PrivateRoute = ({ component: Component, ...props }) => {\n  return <Route {...props} render={() => {\n    // logic for checking if we have an auth token\n    if (localStorage.getItem('token')) {\n      return <Component />\n    }\n    return <Redirect to=\"/login\" />\n  }} />\n}\n\nexport default PrivateRoute;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\n// import TodoIndex from \"./editForm/TodoIndex\"\nimport Title from \"./components/Title\";\nimport List from \"./components/List\";\n// import { titleReducer } from \"./reducers/titleReducer\";\n// import { recipesReducer } from \"./reducers/recipesReducer\";\nimport rootReducer from \"./reducers\";\nimport Nav from \"./components/navbar/Nav\"\nimport CardAdd from \"./components/CardAdd\";\nimport \"./styles.css\";\nimport TodoIndex from \"./editForm/TodoIndex\";\n import Heading from \"./Heading\"\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nimport Login from './components/Login.js';\nimport PrivateRoute from './components/PrivateRoute';\n\n\n\nfunction AppComp() {\n  return (\n    <div key=\"2\"  className=\"App\">\n      <Nav key=\"3\" />\n      <Title key=\"4\" />\n      <List key=\"5\" />\n      <CardAdd key=\"6\" />\n    </div>\n  );\n}\n\n\nfunction App() {\n  const logout = () => {\n    localStorage.removeItem('token')\n  };\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Heading />\n        <Switch>\n          <PrivateRoute exact path=\"/protected\" component={AppComp} />\n          <Route path=\"/login\" component={Login} />\n          <Route component={Login} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\nconst logger = (store) => (next) => (action) => {\n  console.group(action.type);\n  console.log(`preve state: `, store.getState());\n  console.log(`action: `, action);\n  next(action);\n  console.log(\"new state: \", store.getState());\n  console.groupEnd();\n};\n\nconst store = createStore(rootReducer, applyMiddleware(logger));\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider key=\"0\" store={store}>\n    <App key=\"1\" />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}